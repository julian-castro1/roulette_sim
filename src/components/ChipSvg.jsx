import React from 'react';

const ChipSvg = ({ position, color, radius }) => {
    const chipColors = {
        "white" : ["#dddddd", "#378ced"],
        "red" : ["#be0909", "#FFFFFF"],
        "green" : ["#2ee412", "#FFFFFF"],
        "black" : ["#000000", "#FFFFFF"],
        "purple" : ["#9b17ac", "#FFFFFF"],
      }

  const viewBoxSize = radius * 2; // Calculate the viewBox size based on the radius

  return (
    <svg
      width={`${radius * 2.2}px`}
      height={`${radius * 2.2}px`}
      viewBox="0 0 600 600"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      style={{
        position: 'absolute',
        left: `${position.x - radius}px`,
        top: `${position.y - radius}px`,
        zIndex: 100
      }}
    >
        <g transform='matrix(1,0,0,1,20,23)'>
      <circle cx="212.5" cy="212.5" r={radius + 210} style={{ fill: chipColors[color][1] }} />
      </g>
      <g transform='matrix(1,0,0,1,20,20)'>
      <path
        d="M212.5,3.5C95.313,3.5 0.171,98.641 0.171,215.829C0.171,333.017 95.313,428.158 212.5,428.158C329.688,428.158 424.829,333.017 424.829,215.829C424.829,98.641 329.688,3.5 212.5,3.5ZM238.088,423.819C229.381,424.928 220.507,425.5 211.5,425.5C202.494,425.5 193.621,424.928 184.913,423.819L184.913,378.337C193.57,379.754 202.451,380.49 211.5,380.49C220.551,380.49 229.431,379.754 238.088,378.337L238.088,423.819ZM253.051,358.474C242.871,361.532 232.229,363.521 221.258,364.311L221.608,369.177C232.943,368.361 243.937,366.305 254.455,363.145L253.051,358.474ZM169.9,359.045C159.406,356.051 149.386,351.924 139.983,346.808L137.651,351.092C147.367,356.379 157.719,360.642 168.562,363.736L169.9,359.045ZM404.931,292.692C398.399,309.397 389.779,325.053 379.389,339.346L340.119,316.711C350.924,302.716 359.51,286.932 365.357,269.881L404.931,292.692ZM16.014,292.442L55.617,269.682C61.443,286.741 70.01,302.538 80.794,316.544L41.495,339.13C31.122,324.822 22.521,309.153 16.014,292.442ZM322.758,313.082C315.723,321.275 307.806,328.69 299.156,335.18L302.084,339.082C311.017,332.38 319.193,324.722 326.459,316.26L322.758,313.082ZM99.66,314.616C92.533,306.543 86.274,297.687 81.028,288.195L76.758,290.554C82.177,300.359 88.642,309.506 96.003,317.844L99.66,314.616ZM356.998,237.328C355.488,248.193 352.797,258.682 349.056,268.661L353.624,270.373C357.489,260.063 360.27,249.225 361.829,237.999L356.998,237.328ZM64.379,239.34C63.255,232 62.673,224.482 62.673,216.829C62.673,213.539 62.781,210.274 62.993,207.037L58.125,206.718C57.906,210.06 57.795,213.432 57.795,216.829C57.795,224.733 58.397,232.497 59.557,240.078L64.379,239.34ZM344.913,155.066C349.385,164.768 352.836,175.036 355.129,185.732L359.898,184.709C357.529,173.658 353.963,163.049 349.343,153.024L344.913,155.066ZM75.331,156.919C79.744,147.986 85.219,138.628 91.612,129.99L87.691,127.088C81.087,136.011 75.431,145.678 70.873,155.938L75.331,156.919ZM373.745,85.849C384.774,99.676 394.089,114.94 401.36,131.31L362.059,153.897C355.24,137.25 345.76,121.978 334.147,108.606L373.745,85.849ZM47.5,85.645L87.069,108.453C75.441,121.809 65.94,137.073 59.101,153.708L19.829,131.072C27.116,114.715 36.449,99.463 47.5,85.645ZM290.318,91.335C299.43,97.19 307.858,104.017 315.455,111.669L318.917,108.232C311.07,100.329 302.365,93.278 292.955,87.231L290.318,91.335ZM129.061,92.446C138.009,86.522 147.638,81.544 157.805,77.657L156.063,73.1C145.56,77.116 135.612,82.258 126.368,88.379L129.061,92.446ZM209.523,67.864L210.541,67.861C221.577,67.861 232.332,69.072 242.68,71.369L243.737,66.607C233.383,64.309 222.635,63.062 211.609,62.987L210.541,62.983C209.84,62.983 209.14,62.988 208.441,62.997L208.507,67.875C208.846,67.87 209.184,67.867 209.523,67.864ZM237.129,8.74L237.129,54.221C228.472,52.805 219.591,52.068 210.541,52.068C201.491,52.068 192.61,52.805 183.953,54.221L183.953,8.74C192.661,7.63 201.535,7.058 210.541,7.058C219.548,7.058 228.421,7.63 237.129,8.74Z"
        style={{ fill: chipColors[color][0] }}
      />
      </g>
    </svg>
  );
};

export default ChipSvg;
